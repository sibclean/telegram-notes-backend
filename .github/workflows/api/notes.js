import { kv } from '@vercel/kv';
import fetch from 'node-fetch';

// –†–∞–∑—Ä–µ—à–∞–µ–º CORS, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –º–æ–≥ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
const allowCors = fn => async (req, res) => {
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version');
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }
  return await fn(req, res);
};

async function handler(req, res) {
  const { BOT_TOKEN, CHAT_ID } = process.env;

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
  if (req.method === 'GET') {
    const notes = await kv.hgetall('amazon-notes');
    return res.status(200).json(notes || {});
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
  if (req.method === 'POST') {
    const { name, comment } = req.body;
    if (!name) {
      return res.status(400).send('Name is required');
    }

    await kv.hset('amazon-notes', { [name]: comment });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    if (BOT_TOKEN && CHAT_ID) {
      const text = `üìù –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞:\n\n*–û–ø–µ—Ä–∞—Ç–æ—Ä:* ${name}\n*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${comment || '(–ø—É—Å—Ç–æ)'}`;
      const url = `https://api.telegram.org/bot${8314613767:AAFscQLd4LHn88UVwAHEN79yQaaRWM0UjTM}/sendMessage?chat_id=${1009849089}&text=${encodeURIComponent(text)}&parse_mode=Markdown`;
      try {
        await fetch(url);
      } catch (e) {
        console.error("Telegram notification failed:", e);
      }
    }
    return res.status(200).json({ success: true });
  }

  return res.status(405).send('Method Not Allowed');
}

export default allowCors(handler);
