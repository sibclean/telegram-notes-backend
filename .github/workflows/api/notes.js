import { kv } from '@vercel/kv';
import fetch from 'node-fetch';

// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤–∞—à–µ–º—É —Å–∫—Ä–∏–ø—Ç—É Tampermonkey –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
const allowCors = fn => async (req, res) => {
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*'); // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Å –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  res.setHeader('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version');
  
  // –ë—Ä–∞—É–∑–µ—Ä —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç "–ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π" OPTIONS-–∑–∞–ø—Ä–æ—Å
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }
  return await fn(req, res);
};

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞—à–µ–≥–æ API
async function handler(req, res) {
  // –°–ê–ú–û–ï –í–ê–ñ–ù–û–ï: –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel
  const { BOT_TOKEN, CHAT_ID } = process.env;

  // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª GET-–∑–∞–ø—Ä–æ—Å (–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫)
  if (req.method === 'GET') {
    try {
      const notes = await kv.hgetall('amazon-notes');
      return res.status(200).json(notes || {});
    } catch (error) {
      console.error(error);
      return res.status(500).json({ error: 'Failed to fetch notes from KV.' });
    }
  }

  // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª POST-–∑–∞–ø—Ä–æ—Å (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏)
  if (req.method === 'POST') {
    const { name, comment } = req.body;
    if (!name) {
      return res.status(400).send('Name is required');
    }

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await kv.hset('amazon-notes', { [name]: comment || '' });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏ ID –∑–∞–¥–∞–Ω—ã
      if (BOT_TOKEN && CHAT_ID) {
        const text = `üìù –ù–æ–≤–∞—è/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞:\n\n*–û–ø–µ—Ä–∞—Ç–æ—Ä:* ${name}\n*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${comment || '(–ø—É—Å—Ç–æ)'}`;
        const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage?chat_id=${CHAT_ID}&text=${encodeURIComponent(text)}&parse_mode=Markdown`;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ Telegram
        await fetch(url);
      }
      return res.status(200).json({ success: true, message: 'Note saved.' });
    } catch (error) {
      console.error(error);
      return res.status(500).json({ error: 'Failed to save note or send notification.' });
    }
  }

  // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ GET –∏ –Ω–µ POST
  return res.status(405).send('Method Not Allowed');
}

// "–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º" –Ω–∞—à—É –ª–æ–≥–∏–∫—É –≤ —Ñ—É–Ω–∫—Ü–∏—é allowCors
export default allowCors(handler);
